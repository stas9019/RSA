import java.security.SecureRandom

/**
 * Created by stas on 22.11.15.
 */



class RSA {

    static int CRT = 1

    BigInteger d, e

    synchronized BigInteger n
    synchronized BigInteger fn = BigInteger.ONE
    synchronized BigInteger keyPartsMult = BigInteger.ONE
    synchronized def M = BigInteger.ZERO

    synchronized def keyParts = new ArrayList<BigInteger>()


    public RSA(int bits)
    {

        def r = new SecureRandom()

        def p = new BigInteger(bits, 100, r)
        def q = new BigInteger(bits, 100, r)

        n = p.multiply(q)

        fn = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE))
        e = new BigInteger(65537)


        d = e.modInverse(fn)

    }

    public RSA(int k, int l)
    {
        n = BigInteger.ONE
        fn = BigInteger.ONE

        for (int i = 0; i < k; i++)
            n = n.multiply(generatePrime(l))

        e = new BigInteger(65537)
        d = e.modInverse(fn)

        def writer = new PrintWriter("publicKey", "UTF-8")
        writer.print("$e,$n")
        writer.close()

        writer = new PrintWriter("privateKey", "UTF-8")
        writer.print("$d,$n")
        writer.close()
    }


    public RSA(int k, int l, int CRT)
    {
        n = BigInteger.ONE
        fn = BigInteger.ONE
        keyPartsMult = BigInteger.ONE

        for (int i = 0; i < k; i++)
            keyParts.add(0)

        def threads = new ArrayList()

        for (int i = 0; i < k; i++)
        {

            def t = new Thread() {
                public void run() {
                    println "Thread $i"
                    n = n.multiply(generatePrimeCRT(l, i))
                }
            }
            threads.add(t)
            t.start();
           // t.join()

        }

        for(Thread t: threads) t.join();
       /* while(true)
        {
            def work = false

            for(Thread t : threads)
                if(t.isAlive())
                    work = true

            if(!work)
                break;
        }*/



        //println "N =  " + n


        e = new BigInteger(65537)
        d = e.modInverse(fn)

        def writer = new PrintWriter("publicKey", "UTF-8")
        writer.print("$e,$n")
        writer.close()

        writer = new PrintWriter("privateKey", "UTF-8")
        writer.print("$d,$n")
        writer.close()
    }



    public synchronized String encrypt(String message)
    {
        new BigInteger(message.getBytes()).modPow(e, n).toString()

    }

    public synchronized BigInteger encrypt(BigInteger message)
    {
        message.modPow(e, n);
    }

    public synchronized String decrypt(String ciphertext)
    {
        new String(new BigInteger(ciphertext).modPow(d, n).toByteArray())
    }

    public synchronized BigInteger decrypt(BigInteger ciphertext){
        ciphertext.modPow(d, n)
    }

    public synchronized void generateKeys(int bits){
        def r = new SecureRandom()

        def p = new BigInteger(bits, 100, r)
        def q = new BigInteger(bits, 100, r)

        n = p.multiply(q)

        def fn = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE))
        e = new BigInteger(65537)


        d = e.modInverse(fn)

        /*def writer = new PrintWriter("publicKey", "UTF-8")
        writer.print("$e,$n")
        writer.close()

        writer = new PrintWriter("privateKey", "UTF-8")
        writer.print("$d,$n")
        writer.close()*/
    }

    public synchronized BigInteger generatePrime(int bits) {

        def r = new SecureRandom()

        def p = new BigInteger(bits, 100, r)

        keyParts.add(p)


        keyPartsMult = keyPartsMult.multiply(p)
        fn = fn.multiply(p.subtract(BigInteger.ONE))

        return p

    }

    public synchronized BigInteger generatePrimeCRT(int bits, int i) {

        def r = new SecureRandom()

        def p = new BigInteger(bits, 100, r)

        keyParts.set(i, p)


        keyPartsMult = keyPartsMult.multiply(p)


        fn = fn.multiply(p.subtract(BigInteger.ONE))


        return p

    }



    public BigInteger decryptCRT( BigInteger ciphertext)
    {

            for (BigInteger keyPart : keyParts) {

                def t = new Thread() {
                    public void run() {

                        def messagePart = (ciphertext.modPow(d.mod(keyPart.subtract(BigInteger.ONE)), keyPart))
                        def mPart = keyPartsMult.divide(keyPart)
                        def mPartInv = mPart.modInverse(keyPart)

                        M = M.add(messagePart
                                .multiply(mPart)
                                .multiply(mPartInv))

                    }
                }

                t.start();
                t.join()

            }

        M = M.mod(keyPartsMult)
        return M


        /*make in threads???
        def messageParts = new ArrayList<BigInteger>()

        for (BigInteger keyPart : keyParts)
        {
            def messagePart =  (ciphertext.modPow(d.mod( keyPart.subtract(BigInteger.ONE)), keyPart))

            messageParts.add(messagePart)
        }

        def MParts = new ArrayList<BigInteger>()
        def MPartsInv = new ArrayList<BigInteger>()

        for (BigInteger keyPart : keyParts)
        {

            def mPart = keyPartsMult.divide(keyPart)

            MParts.add(mPart)

            MPartsInv.add(mPart.modInverse(keyPart))
        }

        def M = BigInteger.ZERO

        for (int i = 0; i < messageParts.size(); i++) {

            M = M.add(messageParts.get(i)
                    .multiply(MParts.get(i))
                    .multiply(MPartsInv.get(i)))


        }
        */

       /* println "message in crt"
        println new String(M.toByteArray())*/
    }



    public static void main(String[] args) {

        def k = 2
        def l = 512
        def rsa

        /*Traditional TEST*/

        Date date = new Date();
        println  "Traditional started: $date\n"

        rsa = new RSA(k, l)

        def text1 = "The quick brown fox jumps over the lazy dog";
        println "Plaintext: " + text1
        BigInteger plaintext = new BigInteger(text1.getBytes());

        BigInteger ciphertext = rsa.encrypt(plaintext)
        println "Ciphertext: " + ciphertext

        plaintext = rsa.decrypt(ciphertext)

        def text2 = new String(plaintext.toByteArray())
        println "Decrypted: $text2 \n"


        date = new Date();
        println  "Traditional finishted: $date\n"
        println "==================================================\n"
        /*END TEST*/


        /*decryptCRT*/


        date = new Date();
        println  "CRT started: $date \n"


        rsa = new RSA(k, l , CRT)

        ciphertext = rsa.encrypt(plaintext)
        plaintext = rsa.decryptCRT(ciphertext)


        date = new Date();


        text2 = new String(plaintext.toByteArray())
        println "Decrypted CRT: $text2\n"
        println  "CRT finishted: $date "
    }

}
